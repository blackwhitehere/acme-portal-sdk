name: Release Python Package

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Run tests
        run: |
          uv run pytest tests

  release:
    runs-on: ubuntu-latest
    needs: test
    environment: release-pypi # This environment can publish to PyPI, needs to be setup in the repo settings
    permissions: # needed to access the PyPI token: https://docs.astral.sh/uv/guides/publish/#publishing-your-package
      contents: 'read'
      id-token: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Build package
        run: |
          uv build

      - name: Extract release notes
        id: extract_notes
        run: |
          echo "Extracting release notes from CHANGELOG.md..."
          # Extract version from git tag (remove 'v' prefix)
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "Version: $VERSION"
          
          # Try to extract notes for specific version, fallback to unreleased section
          if python scripts/extract_release_notes.py "$VERSION" 2>/dev/null; then
            RELEASE_NOTES=$(python scripts/extract_release_notes.py "$VERSION")
          else
            echo "No notes found for version $VERSION, using unreleased section"
            RELEASE_NOTES=$(python scripts/extract_release_notes.py)
          fi
          
          # Save to file and environment variable for GitHub Actions
          echo "$RELEASE_NOTES" > release-notes.txt
          
          # Set output for use in release creation
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "Release notes extracted successfully"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.extract_notes.outputs.release_notes }}
          draft: false
          prerelease: false

      - name: Publish package
        run: |
          uv publish